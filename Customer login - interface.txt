import tkinter as tk
from tkinter import messagebox

accounts = {
  "12345": {
    "name": "John Doe",
    "balance": 1000.0
  },
  "54321": {
    "name": "Jane Smith",
    "balance": 1500.0
  },
}


def check_balance():
  account_number = account_number_entry.get()

  if account_number in accounts:
    balance = accounts[account_number]["balance"]
    messagebox.showinfo(
      "Balance Enquiry",
      f"Account Number: {account_number}\nAvailable Balance: ${balance:.2f}")
  else:
    messagebox.showerror("Error", "Please enter a valid Account Number.")

  clear_entry()


def deposit_amount():
  account_type = account_type_var.get()
  account_number = account_number_input.get()
  deposit_amount = amount_input.get()

  if not account_number or not deposit_amount:
    update_output("Please fill in all the details.", "red")
    return

  try:
    deposit_amount = float(deposit_amount)
    if deposit_amount <= 0:
      update_output("Amount must be greater than zero.", "red")
      return
  except ValueError:
    update_output("Invalid amount format. Please enter a valid amount.", "red")
    return

  # Perform the deposit action (replace with actual logic)
  # Here, we simulate a successful deposit
  success = True  # Replace with logic for success/failure

  if success:
    update_output("Amount deposited successfully!", "green")
    clear_fields()
  else:
    update_output("Failure to deposit amount.", "red")


def withdraw_amount():
  account_type = account_type_var.get()
  account_number = account_number_input.get()
  balance = balance_input.get()

  if not account_number or not balance:
    update_output("Please fill in all the details.", "red")
    return

  try:
    balance = float(balance)
    if balance <= 0:
      update_output("Balance must be greater than zero.", "red")
      return
  except ValueError:
    update_output("Invalid balance format. Please enter a valid balance.",
                  "red")
    return

  # Perform the withdrawal action (replace with  actual logic)
  # Here, we simulate a successful withdrawal
  success = True  # Replace with logic for success/failure

  if success:
    update_output("Withdrawal Successful!", "green")
    clear_fields()
  else:
    update_output("Transaction Failed.", "red")


def transfer_funds():
  from_account = from_account_entry.get()
  to_account = to_account_entry.get()
  name = name_entry.get()
  amount = amount_entry.get()

  if not from_account or not to_account or not name or not amount:
    messagebox.showerror("Error", "Please enter all the details.")
    return

  amount = float(amount)

  if from_account in accounts and to_account in accounts:
    if accounts[from_account]["balance"] >= amount:
      accounts[from_account]["balance"] -= amount
      accounts[to_account]["balance"] += amount
      messagebox.showinfo("Transaction Successful",
                          "Funds transferred successfully!")
    else:
      messagebox.showerror("Transaction Failed",
                           "Insufficient funds in the From Account.")
  else:
    messagebox.showerror("Transaction Failed", "Invalid account number(s).")

  clear_entries()


def clear_entries():
  from_account_entry.delete(0, tk.END)
  to_account_entry.delete(0, tk.END)
  name_entry.delete(0, tk.END)
  amount_entry.delete(0, tk.END)


def clear_entry():
  account_number_entry.delete(0, tk.END)


def clear_fields():
  account_number_input.delete(0, tk.END)
  amount_input.delete(0, tk.END)


def update_output(message, color):
  output_label.config(text=message, fg=color)


class BankingApp:

  def __init__(self, root):
    self.root = root
    self.root.title("DSS BANK")
    self.logged_in = False
    self.username = ""
    self.create_ui()

  def create_ui(self):
    self.login_frame = tk.Frame(self.root)
    self.banking_frame = None

    self.login_app = self.create_customer_login_app(self.login_frame)

    self.login_frame.pack()

  def create_customer_login_app(self, parent):
    return CustomerLoginApp(parent, self.on_login)

  def on_login(self, username):
    self.logged_in = True
    self.username = username
    self.login_frame.pack_forget()

    self.banking_frame = tk.Toplevel(self.root)
    self.banking_frame.title(f"DSD Bank Welcomes {self.username}")

    logout_btn = tk.Button(self.banking_frame,
                           text="Log Out",
                           command=self.logout)
    logout_btn.grid(row=0, column=30, sticky="ne", padx=10, pady=10)

    buttons = [
      ("Deposit", self.deposit),
      ("Withdraw", self.withdraw),
      ("Transfer", self.transfer),
      ("Balance Enquiry", self.balance_enquiry),
      ("Transaction History", self.transaction_history),
    ]

    for i, (text, command) in enumerate(buttons):
      button = tk.Button(self.banking_frame, text=text, command=command)
      button.grid(row=0, column=i, padx=10, pady=10)

  def logout(self):
    self.logged_in = False
    self.username = ""

    if self.banking_frame:
      self.banking_frame.destroy()

    self.login_frame = tk.Frame(self.root)
    self.login_app = self.create_customer_login_app(self.login_frame)
    self.login_frame.pack()

  def deposit(self):
    deposit_window = tk.Toplevel(self.banking_frame)
    deposit_window.title("Deposit Page")

    global account_type_var
    global account_number_input
    global amount_input
    global output_label

    account_type_label = tk.Label(deposit_window, text="Account Type:")
    account_type_label.pack()

    account_type_options = [
      "Savings", "Current", "Fixed Deposit", "Term Deposit"
    ]
    account_type_var = tk.StringVar(deposit_window)
    account_type_var.set(account_type_options[0])
    account_type_dropdown = tk.OptionMenu(deposit_window, account_type_var,
                                          *account_type_options)
    account_type_dropdown.pack()

    account_number_label = tk.Label(deposit_window, text="Account Number:")
    account_number_label.pack()

    account_number_input = tk.Entry(deposit_window)
    account_number_input.pack()

    amount_label = tk.Label(deposit_window, text="Amount:")
    amount_label.pack()

    amount_input = tk.Entry(deposit_window)
    amount_input.pack()

    deposit_button = tk.Button(deposit_window,
                               text="Deposit",
                               command=deposit_amount)
    deposit_button.pack()

    output_label = tk.Label(deposit_window, text="", fg="black")
    output_label.pack()

  def withdraw(self):
    withdraw_window = tk.Toplevel(self.banking_frame)
    withdraw_window.title("Withdraw Page")

    global account_type_var
    global account_number_input
    global balance_input
    global output_label

    account_type_label = tk.Label(withdraw_window, text="Account Type:")
    account_type_label.pack()

    account_type_options = ["Savings", "Current", "Deposit"]
    account_type_var = tk.StringVar(withdraw_window)
    account_type_var.set(account_type_options[0])
    account_type_dropdown = tk.OptionMenu(withdraw_window, account_type_var,
                                          *account_type_options)
    account_type_dropdown.pack()

    account_number_label = tk.Label(withdraw_window, text="Account Number:")
    account_number_label.pack()

    account_number_input = tk.Entry(withdraw_window)
    account_number_input.pack()

    balance_label = tk.Label(withdraw_window, text="Balance:")
    balance_label.pack()

    balance_input = tk.Entry(withdraw_window)
    balance_input.pack()

    withdraw_button = tk.Button(withdraw_window,
                                text="Withdraw",
                                command=withdraw_amount)
    withdraw_button.pack()

    output_label = tk.Label(withdraw_window, text="", fg="black")
    output_label.pack()

  def transfer(self):
    transfer_window = tk.Toplevel(self.banking_frame)
    transfer_window.title("Transfer Amount")

    global from_account_entry
    global to_account_entry
    global name_entry
    global amount_entry

    from_account_label = tk.Label(transfer_window, text="From Account Number:")
    from_account_label.pack()
    from_account_entry = tk.Entry(transfer_window)
    from_account_entry.pack()

    to_account_label = tk.Label(transfer_window, text="To Account Number:")
    to_account_label.pack()
    to_account_entry = tk.Entry(transfer_window)
    to_account_entry.pack()

    name_label = tk.Label(transfer_window, text="Name:")
    name_label.pack()
    name_entry = tk.Entry(transfer_window)
    name_entry.pack()

    amount_label = tk.Label(transfer_window, text="Amount:")
    amount_label.pack()
    amount_entry = tk.Entry(transfer_window)
    amount_entry.pack()

    transfer_button = tk.Button(transfer_window,
                                text="Transfer",
                                command=transfer_funds)
    transfer_button.pack()

  def balance_enquiry(self):
    balance_enquiry_window = tk.Toplevel(self.banking_frame)
    balance_enquiry_window.title("Balance Enquiry")

    global account_number_entry

    account_number_label = tk.Label(balance_enquiry_window,
                                    text="Enter Account Number:")
    account_number_label.pack()
    account_number_entry = tk.Entry(balance_enquiry_window)
    account_number_entry.pack()

    check_balance_button = tk.Button(balance_enquiry_window,
                                     text="Check Balance",
                                     command=check_balance)
    check_balance_button.pack()

    exit_button = tk.Button(balance_enquiry_window,
                            text="Exit Page",
                            command=balance_enquiry_window.quit)
    exit_button.pack()

  def transaction_history(self):
    messagebox.showinfo("Transaction History",
                        "Transaction history action goes here.")


class CustomerLoginApp:

  def __init__(self, root, on_login_callback):
    self.root = root
    self.on_login_callback = on_login_callback
    self.create_ui()

  def create_ui(self):
    self.label = tk.Label(self.root,
                          text="Customer Login",
                          font=("Helvetica", 16))
    self.label.pack(pady=10)

    self.username_label = tk.Label(self.root, text="Username:")
    self.username_label.pack()

    self.username_entry = tk.Entry(self.root)
    self.username_entry.pack()

    self.password_label = tk.Label(self.root, text="Password:")
    self.password_label.pack()

    self.password_entry = tk.Entry(self.root, show="*")
    self.password_entry.pack()

    self.confirm_password_label = tk.Label(self.root, text="Confirm Password:")
    self.confirm_password_label.pack()

    self.confirm_password_entry = tk.Entry(self.root, show="*")
    self.confirm_password_entry.pack()

    self.submit_btn = tk.Button(self.root, text="Submit", command=self.submit)
    self.submit_btn.pack(pady=10)

  def submit(self):
    username = self.username_entry.get()
    password = self.password_entry.get()
    confirm_password = self.confirm_password_entry.get()

    if not username or not password or not confirm_password:
      messagebox.showerror("Error", "Please fill in all the details.")
      return

    if password == confirm_password:
      messagebox.showinfo("Success", "Login successful!")
      self.on_login_callback(username)
    else:
      messagebox.showerror("Error",
                           "Passwords do not match. Please try again.")


if __name__ == "__main__":
  root = tk.Tk()
  app = BankingApp(root)
  root.mainloop()
